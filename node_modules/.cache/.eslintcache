[{"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/index.js":"1","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/App.js":"2","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/context/AuthContext.js":"3","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/context/ChatContext.js":"4","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/firebase.js":"5","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/pages/Home.jsx":"6","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/pages/Login.jsx":"7","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/pages/Register.jsx":"8","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Sidebar.jsx":"9","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Chat.jsx":"10","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Navbar.jsx":"11","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Search.jsx":"12","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Chats.jsx":"13","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Messages.jsx":"14","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Input.jsx":"15","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Message.jsx":"16","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Chathead.jsx":"17"},{"size":468,"mtime":1689581376652,"results":"18","hashOfConfig":"19"},{"size":944,"mtime":1689581376652,"results":"20","hashOfConfig":"19"},{"size":608,"mtime":1689581376652,"results":"21","hashOfConfig":"19"},{"size":964,"mtime":1689790490567,"results":"22","hashOfConfig":"19"},{"size":656,"mtime":1689581637002,"results":"23","hashOfConfig":"19"},{"size":287,"mtime":1689581376656,"results":"24","hashOfConfig":"19"},{"size":1093,"mtime":1689587774620,"results":"25","hashOfConfig":"19"},{"size":3095,"mtime":1689787541047,"results":"26","hashOfConfig":"19"},{"size":273,"mtime":1689581376652,"results":"27","hashOfConfig":"19"},{"size":1296,"mtime":1689790911687,"results":"28","hashOfConfig":"19"},{"size":485,"mtime":1689665873124,"results":"29","hashOfConfig":"19"},{"size":2770,"mtime":1690480025113,"results":"30","hashOfConfig":"19"},{"size":1663,"mtime":1690479362583,"results":"31","hashOfConfig":"19"},{"size":1193,"mtime":1689804033541,"results":"32","hashOfConfig":"19"},{"size":3239,"mtime":1690478843556,"results":"33","hashOfConfig":"19"},{"size":964,"mtime":1689796694484,"results":"34","hashOfConfig":"19"},{"size":301,"mtime":1689789778461,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1rb9uyy",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/index.js",[],[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/App.js",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/context/AuthContext.js",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/context/ChatContext.js",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/firebase.js",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/pages/Home.jsx",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/pages/Login.jsx",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/pages/Register.jsx",["94"],[],"import React, { useContext, useState } from \"react\";\nimport Add from \"../img/addAvatar.png\";\nimport { createUserWithEmailAndPassword, updateProfile } from \"firebase/auth\";\nimport { auth, db, storage } from \"../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { ChatContext } from \"../context/ChatContext\";\n\nconst Register = () => {\n  const [err, setErr] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const { dispatch } = useContext(ChatContext);\n\n\n  const handleSubmit = async (e) => {\n    setLoading(true);\n    e.preventDefault();\n    // dispatch({ type: \"CHANGE_USER\", payload: {} });\n\n\n    const displayName = e.target[0].value;\n    const email = e.target[1].value;\n    const password = e.target[2].value;\n    const file = e.target[3].files[0];\n\n    try {\n      //Create user\n      const res = await createUserWithEmailAndPassword(auth, email, password);\n\n      //Create a unique image name\n      const date = new Date().getTime();\n      const storageRef = ref(storage, `${displayName + date}`);\n\n      await uploadBytesResumable(storageRef, file).then(() => {\n        getDownloadURL(storageRef).then(async (downloadURL) => {\n          try {\n            //Update profile\n            await updateProfile(res.user, {\n              displayName,\n              photoURL: downloadURL,\n            });\n            //create user on firestore\n            await setDoc(doc(db, \"users\", res.user.uid), {\n              uid: res.user.uid,\n              displayName,\n              email,\n              photoURL: downloadURL,\n            });\n\n            //create empty user chats on firestore\n            await setDoc(doc(db, \"userChats\", res.user.uid), {});\n            navigate(\"/\");\n          } catch (err) {\n            console.log(err);\n            setErr(true);\n            setLoading(false);\n          }\n        });\n      });\n    } catch (err) {\n      setErr(true);\n      setLoading(false);\n    }\n    // dispatch({ type: \"CHANGE_USER\", payload: {} });\n\n  };\n\n  return (\n    <div className=\"formContainer\">\n      <div className=\"formWrapper\">\n        <span className=\"logo\">CHAT APP</span>\n        <form onSubmit={handleSubmit}>\n          <input required type=\"text\" placeholder=\"username...\" />\n          <input required type=\"email\" placeholder=\"user@email.com\" />\n          <input required type=\"password\" placeholder=\"pass123...\" />\n          <input required style={{ display: \"none\" }} type=\"file\" id=\"file\" />\n          <label htmlFor=\"file\">\n            <img src={Add} alt=\"\" />\n            <span>Add an avatar</span>\n          </label>\n          <button disabled={loading}>Sign up</button>\n          {loading && \"Uploading and compressing the image please wait...\"}\n          {err && <span>Something went wrong</span>}\n        </form>\n        <p>\n          You do have an account? <Link to=\"/login\">Login</Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Sidebar.jsx",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Chat.jsx",["95","96","97","98"],[],"import React, { useContext } from \"react\";\nimport Cam from \"../img/cam.png\";\nimport Add from \"../img/add.png\";\nimport More from \"../img/more.png\";\nimport Messages from \"./Messages\";\nimport Input from \"./Input\";\nimport { ChatContext } from \"../context/ChatContext\";\nimport Chathead from \"./Chathead\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { signOut } from \"firebase/auth\";\nimport { auth } from \"../firebase\";\nimport ExitToAppIcon from \"@mui/icons-material/ExitToApp\";\n\nconst Chat = () => {\n  const { data , dispatch} = useContext(ChatContext);\n  const { currentUser } = useContext(AuthContext);\n\n  const logOut = () => {\n    signOut(auth);\n    // console.log(data);\n    dispatch({ type: \"CHANGE_USER\", payload: {} });\n    // console.log(data);\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chatInfo\">\n        <div className=\"chatIcons\">\n          <div className=\"user\">\n            <img src={currentUser.photoURL} alt=\"\" />\n            <span>{currentUser.displayName}</span>\n            <button onClick={logOut}>\n              <ExitToAppIcon style={{ fontSize: \"2rem\", color: \"#2196F3\" }} />\n            </button>\n          </div>\n        </div>\n      </div>\n      <Chathead />\n      <Messages />\n      <Input />\n    </div>\n  );\n};\n\nexport default Chat;\n","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Navbar.jsx",["99","100","101"],[],"import React, { useContext } from \"react\";\nimport { signOut } from \"firebase/auth\";\nimport { auth } from \"../firebase\";\nimport { AuthContext } from \"../context/AuthContext\";\n\nconst Navbar = () => {\n  const { currentUser } = useContext(AuthContext);\n\n  return (\n    <div className=\"navbar\">\n      <span className=\"logo\">\n      <img width=\"36\" height=\"36\" src=\"https://img.icons8.com/color/48/filled-chat.png\" alt=\"filled-chat\"/>\n      </span>\n    </div>\n  );\n};\n\nexport default Navbar;\n","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Search.jsx",["102"],[],"import React, { useContext, useState } from \"react\";\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  setDoc,\n  doc,\n  updateDoc,\n  serverTimestamp,\n  getDoc,\n} from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { ChatContext } from \"../context/ChatContext\";\n\nconst Search = () => {\n  const [username, setUsername] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [err, setErr] = useState(false);\n\n  const { currentUser } = useContext(AuthContext);\n  const { dispatch } = useContext(ChatContext);\n\n  const handleSearch = async () => {\n    const q = query(\n      collection(db, \"users\"),\n      where(\"displayName\", \"==\", username)\n    );\n\n    try {\n      const querySnapshot = await getDocs(q);\n      querySnapshot.forEach((doc) => {\n        setUser(doc.data());\n      });\n    } catch (err) {\n      setErr(true);\n    }\n  };\n\n  const handleKey = (e) => {\n    e.code === \"Enter\" && handleSearch();\n  };\n\n  const handleSelect = async () => {\n    //check whether the group(chats in firestore) exists, if not create\n    const combinedId =\n      currentUser.uid > user.uid\n        ? currentUser.uid + user.uid\n        : user.uid + currentUser.uid;\n    try {\n      const res = await getDoc(doc(db, \"chats\", combinedId));\n\n      if (!res.exists()) {\n        //create a chat in chats collection\n        await setDoc(doc(db, \"chats\", combinedId), { messages: [] });\n\n        //create user chats\n        await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n          [combinedId + \".userInfo\"]: {\n            uid: user.uid,\n            displayName: user.displayName,\n            photoURL: user.photoURL,\n          },\n          [combinedId + \".date\"]: serverTimestamp(),\n        });\n\n        await updateDoc(doc(db, \"userChats\", user.uid), {\n          [combinedId + \".userInfo\"]: {\n            uid: currentUser.uid,\n            displayName: currentUser.displayName,\n            photoURL: currentUser.photoURL,\n          },\n          [combinedId + \".date\"]: serverTimestamp(),\n        });\n      }\n    } catch (err) {}\n\n    setUser(null);\n    setUsername(\"\");\n  };\n  return (\n    <div className=\"search\">\n      <div className=\"searchForm\">\n        <input\n          type=\"text\"\n          placeholder=\"Find a user...\"\n          onKeyDown={handleKey}\n          onChange={(e) => setUsername(e.target.value)}\n          value={username}\n        />\n      </div>\n      {err && <span>User not found!</span>}\n      {user && (\n        <div className=\"userChat\" onClick={handleSelect}>\n          <img src={user.photoURL} alt=\"\" />\n          <div className=\"userChatInfo\">\n            <span>{user.displayName}</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Chats.jsx",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Messages.jsx",[],[],"/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Input.jsx",["103","104","105","106","107"],[],"import React, { useContext, useState } from \"react\";\nimport Img from \"../img/img.png\";\nimport Attach from \"../img/attach.png\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { ChatContext } from \"../context/ChatContext\";\nimport {\n  arrayUnion,\n  doc,\n  serverTimestamp,\n  Timestamp,\n  updateDoc,\n} from \"firebase/firestore\";\nimport { db, storage } from \"../firebase\";\nimport { v4 as uuid } from \"uuid\";\nimport { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\n\nconst months = {\n  1: \"Jan\",\n  2: \"Feb\",\n  3: \"Mar\",\n  4: \"Apr\",\n  5: \"May\",\n  6: \"Jun\",\n  7: \"Jul\",\n  8: \"Aug\",\n  9: \"Sep\",\n  10: \"Oct\",\n  11: \"Nov\",\n  12: \"Dec\",\n};\n\nconst Input = () => {\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n\n  const { currentUser } = useContext(AuthContext);\n  const { data } = useContext(ChatContext);\n\n  const handleSend = async () => {\n    setText(\"\");\n    document.getElementById(\"input-field\").focus();\n    if (img) {\n      var stamp = new Date();\n      var temp = stamp.getMonth() + 1;\n      var month = months[temp];\n      const storageRef = ref(storage, uuid());\n\n      const uploadTask = uploadBytesResumable(storageRef, img).then(() => {\n        getDownloadURL(storageRef).then(async (downloadURL) => {\n          console.log(downloadURL);\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              img: downloadURL,\n              date: stamp.getDate(),\n              time: stamp.getHours() + \":\" + stamp.getMinutes(),\n              month,\n            }),\n          });\n        });\n      });\n    } else {\n      var stamp = new Date();\n      var temp = stamp.getMonth() + 1;\n      var month = months[temp];\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: stamp.getDate(),\n          time: stamp.getHours() + \":\" + stamp.getMinutes(),\n          month,\n        }),\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text,\n      },\n      [data.chatId + \".date\"]: serverTimestamp(),\n    });\n\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text,\n      },\n      [data.chatId + \".date\"]: serverTimestamp(),\n    });\n\n    setImg(null);\n  };\n  return (\n    <div className=\"inputWrapper\">\n      <div className=\"input\">\n        <input\n          type=\"text\"\n          placeholder=\"Type something...\"\n          onChange={(e) => setText(e.target.value)}\n          value={text}\n          autoFocus\n          id=\"input-field\"\n        />\n        <div className=\"send\">\n          <img src={Attach} alt=\"\" />\n          <input\n            type=\"file\"\n            style={{ display: \"none\" }}\n            id=\"file\"\n            onChange={(e) => setImg(e.target.files[0])}\n          />\n          <label htmlFor=\"file\">\n            <img src={Img} alt=\"\" />\n          </label>\n          <button onClick={handleSend}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Message.jsx",["108"],["109"],"/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { ChatContext } from \"../context/ChatContext\";\n\nconst Message = ({ message }) => {\n  const { currentUser } = useContext(AuthContext);\n  const { data } = useContext(ChatContext);\n\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [message]);\n\n  return (\n    <div\n      ref={ref}\n      className={`message ${message.senderId === currentUser.uid && \"owner\"}`}\n    >\n      <div className=\"messageInfo\">\n      </div>\n      <div className=\"messageContent\">\n        <div>\n          {message.text && <p className=\"text\">{message.text} </p>}\n          {message.time && <p className=\"time\">{message.time}</p>}\n        </div>\n\n        {message.img && <img src={message.img} alt=\"image\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","/home/animesh/Desktop/DEV/PROJECT/chat-app/src/components/Chathead.jsx",[],[],{"ruleId":"110","severity":1,"message":"111","line":14,"column":11,"nodeType":"112","messageId":"113","endLine":14,"endColumn":19},{"ruleId":"110","severity":1,"message":"114","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":11},{"ruleId":"110","severity":1,"message":"115","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":11},{"ruleId":"110","severity":1,"message":"116","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":12},{"ruleId":"110","severity":1,"message":"117","line":15,"column":11,"nodeType":"112","messageId":"113","endLine":15,"endColumn":15},{"ruleId":"110","severity":1,"message":"118","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":17},{"ruleId":"110","severity":1,"message":"119","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":14},{"ruleId":"110","severity":1,"message":"120","line":7,"column":11,"nodeType":"112","messageId":"113","endLine":7,"endColumn":22},{"ruleId":"110","severity":1,"message":"111","line":23,"column":11,"nodeType":"112","messageId":"113","endLine":23,"endColumn":19},{"ruleId":"110","severity":1,"message":"121","line":10,"column":3,"nodeType":"112","messageId":"113","endLine":10,"endColumn":12},{"ruleId":"110","severity":1,"message":"122","line":48,"column":13,"nodeType":"112","messageId":"113","endLine":48,"endColumn":23},{"ruleId":"123","severity":1,"message":"124","line":65,"column":11,"nodeType":"112","messageId":"125","endLine":65,"endColumn":16},{"ruleId":"123","severity":1,"message":"126","line":66,"column":11,"nodeType":"112","messageId":"125","endLine":66,"endColumn":15},{"ruleId":"123","severity":1,"message":"127","line":67,"column":11,"nodeType":"112","messageId":"125","endLine":67,"endColumn":16},{"ruleId":"110","severity":1,"message":"117","line":8,"column":11,"nodeType":"112","messageId":"113","endLine":8,"endColumn":15},{"ruleId":"128","severity":1,"message":"129","line":29,"column":25,"nodeType":"130","endLine":29,"endColumn":62,"suppressions":"131"},"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'Cam' is defined but never used.","'Add' is defined but never used.","'More' is defined but never used.","'data' is assigned a value but never used.","'signOut' is defined but never used.","'auth' is defined but never used.","'currentUser' is assigned a value but never used.","'Timestamp' is defined but never used.","'uploadTask' is assigned a value but never used.","no-redeclare","'stamp' is already defined.","redeclared","'temp' is already defined.","'month' is already defined.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["132"],{"kind":"133","justification":"134"},"directive",""]